type Query {
    findBookById(id: ID): Book
    findAuthorById(id: ID): Author
    findBooks(first: Int, after: String, sort: [Sort]): BookConnection
    findAuthors(first: Int, after: String, sort: [Sort]): AuthorConnection
}

type Mutation {
    createAuthor(input: CreateAuthorInput): CreateAuthorPayload
    updateAuthorName(input: UpdateAuthorNameInput): UpdateAuthorNamePayload
    createBook(input: CreateBookInput): CreateBookPayload
    updateBookName(input: UpdateBookNameInput): UpdateBookNamePayload
}

type Subscription {
    getABook(id: ID): Book
}

type Book {
    id: ID!
    name: String
    pageCount: Int
    authors: [Author]
    version: Int
}

type Author {
    id: ID!
    name: String
    version: Int
}


input CreateAuthorInput {
    name: String!
}

input UpdateAuthorNameInput {
    id: ID!
    name: String
    version: Int!
}

type UpdateAuthorNamePayload {
    updatedAuthor: Author
}

input CreateBookInput {
    name: String!
    pageCount: Int
    authors: [ID!]!
}

type CreateAuthorPayload {
    createdAuthor: Author
}

type CreateBookPayload {
    createdBook: Book
}

input UpdateBookNameInput {
    id: ID!
    name: String
    version: Int!
}

type UpdateBookNamePayload {
    book: Book
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

enum Order {
    ASC
    DESC
}

input Sort {
    field: String
    order: Order
}

interface Connection {
    pageInfo: PageInfo!
    totalCount: Int
}

interface Edge {
    cursor: String!
}

type BookEdge implements Edge {
    cursor: String!
    node: Book
}

type AuthorEdge implements Edge {
    cursor: String!
    node: Author
}

type BookConnection implements Connection {
    edges: [BookEdge]
    pageInfo: PageInfo!
    totalCount: Int
}

type AuthorConnection implements Connection {
    edges: [AuthorEdge]
    pageInfo: PageInfo!
    totalCount: Int
}